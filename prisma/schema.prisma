// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id @default(cuid())
  name              String?
  email             String    @unique
  emailVerified     DateTime?
  image             String?
  password          String?   // Para autenticaci√≥n con credenciales
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  // Campos para OAuth (preparados para el futuro)
  provider          String?   // "google", "github", etc.
  providerAccountId String?   // ID del usuario en el proveedor OAuth
  
  // Relaciones
  accounts          Account[]
  sessions          Session[]
  favorites         Favorite[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  albumId   String
  albumName String
  artist    String
  imageUrl  String?
  createdAt DateTime @default(now())
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, albumId])
  @@map("favorites")
}

model RockKeyword {
  id      String @id @default(uuid())
  keyword String @unique

  @@map("rock_keywords")
}